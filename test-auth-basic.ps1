# Teste b√°sico dos endpoints de autentica√ß√£o
Write-Host "üß™ Teste b√°sico dos endpoints de autentica√ß√£o..." -ForegroundColor Green

$baseUrl = "http://localhost:3001/api"

Write-Host "`n=== TESTE 1: HEALTH CHECK ===" -ForegroundColor Yellow
try {
    $health = Invoke-RestMethod -Uri "$baseUrl/health" -Method GET
    Write-Host "‚úÖ Server health: $($health.status)" -ForegroundColor Green
    Write-Host "üïê Uptime: $($health.uptime) segundos" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Servidor n√£o est√° respondendo" -ForegroundColor Red
    exit 1
}

Write-Host "`n=== TESTE 2: VERIFY SEM TOKEN (DEVE DAR 401) ===" -ForegroundColor Yellow
try {
    $verifyResult = Invoke-RestMethod -Uri "$baseUrl/auth/verify" -Method GET
    Write-Host "‚ùå ERRO: Verify deveria retornar 401 sem token!" -ForegroundColor Red
} catch {
    $statusCode = $_.Exception.Response.StatusCode.value__
    if ($statusCode -eq 401) {
        Write-Host "‚úÖ Verify sem token corretamente retornou 401" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Verify retornou c√≥digo inesperado: $statusCode" -ForegroundColor Yellow
    }
}

Write-Host "`n=== TESTE 3: LOGIN COM DADOS INV√ÅLIDOS (DEVE DAR 401) ===" -ForegroundColor Yellow
$invalidLogin = @{
    email = "invalid@test.com"
    senha = "wrongpassword"
} | ConvertTo-Json -Compress

try {
    $loginResult = Invoke-RestMethod -Uri "$baseUrl/auth/login" -Method POST -Body $invalidLogin -ContentType "application/json"
    Write-Host "‚ùå ERRO: Login inv√°lido deveria retornar 401!" -ForegroundColor Red
} catch {
    $statusCode = $_.Exception.Response.StatusCode.value__
    if ($statusCode -eq 401 -or $statusCode -eq 404) {
        Write-Host "‚úÖ Login inv√°lido corretamente rejeitado (Status: $statusCode)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Login inv√°lido retornou c√≥digo inesperado: $statusCode" -ForegroundColor Yellow
    }
}

Write-Host "`n=== TESTE 4: LOGOUT SEM TOKEN (DEVE DAR 401) ===" -ForegroundColor Yellow
try {
    $logoutResult = Invoke-RestMethod -Uri "$baseUrl/auth/logout" -Method POST
    Write-Host "‚ùå ERRO: Logout sem token deveria retornar 401!" -ForegroundColor Red
} catch {
    $statusCode = $_.Exception.Response.StatusCode.value__
    if ($statusCode -eq 401) {
        Write-Host "‚úÖ Logout sem token corretamente retornou 401" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Logout retornou c√≥digo inesperado: $statusCode" -ForegroundColor Yellow
    }
}

Write-Host "`nüéØ TESTE NO NAVEGADOR NECESS√ÅRIO!" -ForegroundColor Cyan
Write-Host "üìã Para completar o teste, abra o navegador e:" -ForegroundColor Yellow
Write-Host "  1. Acesse http://localhost:3000/login" -ForegroundColor Gray
Write-Host "  2. Fa√ßa login com suas credenciais" -ForegroundColor Gray
Write-Host "  3. Abra DevTools (F12) ‚Üí Application/Aplicativo ‚Üí Cookies" -ForegroundColor Gray
Write-Host "  4. Verifique se existe cookie 'refresh_token' com:" -ForegroundColor Gray
Write-Host "     - HttpOnly: ‚úì" -ForegroundColor Green
Write-Host "     - SameSite: Lax" -ForegroundColor Green
Write-Host "     - Expires: ~8 horas no futuro" -ForegroundColor Green
Write-Host "  5. Recarregue a p√°gina (F5) e verifique se mant√©m o login" -ForegroundColor Gray
Write-Host "  6. Feche a aba e abra novamente para testar logout autom√°tico" -ForegroundColor Gray

Write-Host "`n‚úÖ Testes b√°sicos dos endpoints completados!" -ForegroundColor Green